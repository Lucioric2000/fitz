#!/usr/bin/env python
"""
Main execution script for fMRI analysis in the ecosystem.

"""
import os
import sys
import argparse
import fitz
import os.path as op


def main(arglist):
    """Main function for workflow setup and execution."""
    args = parse_args(arglist)

    # Get and process specific information
    project = fitz.gather_project_info()
    exp = fitz.gather_experiment_info(args.experiment, args.altmodel)

    # Subject is always highest level of parameterization
    subject_list = fitz.determine_subjects(args.subjects)
    subj_source = fitz.tools.make_subject_source(subject_list)

    # Get the full correct name for the experiment
    if args.experiment is None:
        exp_name = project["default_exp"]
    else:
        exp_name = args.experiment

    exp_base = exp_name
    if args.altmodel is not None:
        exp_name = "-".join([exp_base, args.altmodel])

    # Set roots of output storage
    project['analysis_dir'] = op.join(project["analysis_dir"], exp_name)
    project['working_dir'] = op.join(project["working_dir"], exp_name)
    # nipype.config.set("execution", "crashdump_dir", project["crash_dir"])
    # nipype.config.set("logging", "filemanip_level", 'DEBUG')
    # nipype.config.enable_debug_mode()
    # nipype.logging.update_logging(nipype.config)

    setup_dirs(project['analysis_dir'], exp_base, exp_name, subject_list)

    if 'preproc' in args.workflows:
        # Possibly execute the workflow, depending on the command line
        import fitz.pipes.workflows.preproc as f_preproc
        preproc = f_preproc.workflow(project, exp, args, subj_source)
        fitz.run_workflow(preproc, "preproc", args)

    if 'onset' in args.workflows:
        import fitz.pipes.workflows.onset as f_onset
        onset = f_onset.workflow(project, exp, args, subj_source)
        fitz.run_workflow(onset, "onset", args)

    if 'model' in args.workflows:
        import fitz.pipes.workflows.model as f_model
        model = f_model.workflow(project, exp, args, subj_source)
        fitz.run_workflow(model, "model", args)


def setup_dirs(analysis_dir, exp_base, exp_name, subject_list):
    """Create symlinks to the preproc directory for altmodels"""
    if not op.exists(analysis_dir):
        os.makedirs(analysis_dir)
    if exp_base != exp_name:
        for subj in subject_list:
            subj_dir = op.join(analysis_dir, subj)
            if not op.exists(subj_dir):
                os.makedirs(subj_dir)
            link_dir = op.join(analysis_dir, subj, "preproc")
            if not op.exists(link_dir):
                preproc_dir = op.join("../..", exp_base, subj, "preproc")
                os.symlink(preproc_dir, link_dir)


def parse_args(arglist):
    """Take an arglist and return an argparse Namespace."""
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()
    run_parser = fitz.tools.run_parser(subparsers)

    return parser.parse_args(arglist)


if __name__ == '__main__':
    main(sys.argv[1:])
