#!/usr/bin/env python
"""
Main execution script for fMRI analysis in the ecosystem.

"""
import os
import sys
import argparse
import imp
import fitz
import os.path as op
from nipype import config, logging
import subprocess
from fitz.tools.builder import new_workflow
from fitz.frontend import run, install

print 'Fitz: Version %s' % fitz.version


def main(arglist):
    """Main function for handing off execution from the command line."""
    args = parse_args(arglist)

    # Call the function determined by the chosen subparser.
    args.func(args)


def install(args):
    project = fitz.gather_project_info()
    exp = fitz.gather_experiment_info(project['default_exp'])

    cmd = ['git', 'clone', exp['workflow_src']]
    workflow_base = os.path.splitext(os.path.basename(exp['workflow_src']))[0]
    print workflow_base
    print ' '.join(cmd)
    if not os.path.isdir(workflow_base):
        subprocess.check_call(cmd)
    else:
        print "Workflow %s already exists." % workflow_base

    cmd = ['git', 'checkout', exp['workflow_version']]
    print ' '.join(cmd)
    try:
        subprocess.check_call(cmd, cwd=workflow_base)
    except:
        print "Error checking out tag %s" % exp['workflow_version']
        # raise


def parse_args(arglist):
    """Take an arglist and return an argparse Namespace."""
    parser = argparse.ArgumentParser()
    parser.add_argument('--verbose', '-v', action='store_true')
    subparsers = parser.add_subparsers()
    run_parser = fitz.tools.run_parser(subparsers)
    run_parser.set_defaults(func=run)

    setup_parser = subparsers.add_parser('setup', help='setup')
    setup_parser.description = 'setup a new fitz directory'
    setup_parser.set_defaults(func=fitz.tools.setup_project.main)

    install_parser = subparsers.add_parser('install', help='install workflows')
    install_parser.description = 'Install workflows requested by experiments'
    install_parser.set_defaults(func=install)

    new_parser = subparsers.add_parser('new', help='create new fitz things')
    new_parsers = new_parser.add_subparsers()
    new_workflow_parser = new_parsers.add_parser('workflow')
    new_workflow_parser.description = 'Create a new workflow skeleton.'
    new_workflow_parser.set_defaults(func=new_workflow)
    new_workflow_parser.add_argument('pipe_name', help='Name of pipeline')
    new_workflow_parser.add_argument('workflow_name', help='Name of workflow')

    return parser.parse_args(arglist)


if __name__ == '__main__':
    main(sys.argv[1:])
