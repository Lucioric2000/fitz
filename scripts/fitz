#!/usr/bin/env python
"""
Main execution script for fMRI analysis in the ecosystem.

"""
import os
import sys
import argparse
import fitz
import os.path as op
from nipype import config
import subprocess

print 'Fitz: Version 0.0.1dev'


def main(arglist):
    """Main function for handing off execution from the command line."""
    args = parse_args(arglist)

    # Call the function determined by the chosen subparser.
    args.func(args)


def run(args):
    """Get and process specific information"""
    project = fitz.gather_project_info()
    exp = fitz.gather_experiment_info(args.experiment, args.model)

    # Subject is always highest level of parameterization
    subject_list = fitz.determine_subjects(args.subjects)
    subj_source = fitz.tools.make_subject_source(subject_list)

    # Get the full correct name for the experiment
    if args.experiment is None:
        exp_name = project["default_exp"]
    else:
        exp_name = args.experiment

    exp_base = exp_name
    if args.model is not None:
        exp_name = "-".join([exp_base, args.model])

    # Set roots of output storage
    project['analysis_dir'] = op.join(project["analysis_dir"], exp_name)
    project['working_dir'] = op.join(project["working_dir"], exp_name)

    config.set("execution", "crashdump_dir", project["crash_dir"])
    # nipype.config.set("logging", "filemanip_level", 'DEBUG')
    # nipype.config.enable_debug_mode()
    # nipype.logging.update_logging(nipype.config)

    setup_dirs(project['analysis_dir'], exp_base, exp_name, subject_list)

    if 'xnatconvert' in args.workflows:
        import fitz.pipes.workflows.xnatconvert as f_xnatconvert
        params = f_xnatconvert.default_parameters
        params.update(exp)
        xnatconvert = f_xnatconvert.workflow(
            project, params, args, subj_source)
        fitz.run_workflow(xnatconvert, "xnatconvert", args)

    if 'preproc' in args.workflows:
        # Possibly execute the workflow, depending on the command line
        import fitz.pipes.workflows.preproc as f_preproc
        preproc = f_preproc.workflow(project, exp, args, subj_source)
        fitz.run_workflow(preproc, "preproc", args)

    if 'onset' in args.workflows:
        import fitz.pipes.workflows.onset as f_onset
        onset = f_onset.workflow(project, exp, args, subj_source)
        fitz.run_workflow(onset, "onset", args)

    if 'model' in args.workflows:
        import fitz.pipes.workflows.model as f_model
        model = f_model.workflow(project, exp, args, subj_source)
        fitz.run_workflow(model, "model", args)


def setup_dirs(analysis_dir, exp_base, exp_name, subject_list):
    """Create symlinks to the preproc directory for altmodels"""
    if not op.exists(analysis_dir):
        os.makedirs(analysis_dir)
    if exp_base != exp_name:
        for subj in subject_list:
            subj_dir = op.join(analysis_dir, subj)
            if not op.exists(subj_dir):
                os.makedirs(subj_dir)
            link_dir = op.join(analysis_dir, subj, "preproc")
            if not op.exists(link_dir):
                preproc_dir = op.join("../..", exp_base, subj, "preproc")
                os.symlink(preproc_dir, link_dir)


def install(args):
    project = fitz.gather_project_info()
    exp = fitz.gather_experiment_info(project['default_exp'])

    cmd = ['git', 'clone', exp['workflow_src']]
    print ' '.join(cmd)
    subprocess.check_call(cmd)

    cmd = ['git', 'checkout', exp['workflow_version']]
    print ' '.join(cmd)
    # subprocess.check_call(cmd)


def parse_args(arglist):
    """Take an arglist and return an argparse Namespace."""
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()
    run_parser = fitz.tools.run_parser(subparsers)
    run_parser.set_defaults(func=run)

    setup_parser = subparsers.add_parser('setup', help='setup')
    setup_parser.description = 'setup a new fitz directory'
    setup_parser.set_defaults(func=setup_project.main)

    install_parser = subparsers.add_parser('install', help='install workflows')
    install_parser.description = 'Install workflows requested by experiments'
    install_parser.set_defaults(func=install)

    return parser.parse_args(arglist)


if __name__ == '__main__':
    main(sys.argv[1:])
